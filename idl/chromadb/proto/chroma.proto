syntax = "proto3";

package chroma;

option go_package = "github.com/chroma-core/chroma/go/pkg/proto/coordinatorpb";

message Status {
  string reason = 1;
  int32 code = 2; // TODO: What is the enum of this code?
}

// Types here should mirror chromadb/types.py
enum Operation {
    ADD = 0;
    UPDATE = 1;
    UPSERT = 2;
    DELETE = 3;
}

enum ScalarEncoding {
    FLOAT32 = 0;
    INT32 = 1;
}

message Vector {
    int32 dimension = 1;
    bytes vector = 2;
    ScalarEncoding encoding = 3;
}

enum SegmentScope {
    VECTOR = 0;
    METADATA = 1;
}

message FilePaths {
    repeated string paths = 1;
}

message Segment {
    string id = 1;
    string type = 2;
    SegmentScope scope = 3;
    optional string collection = 5;
    optional UpdateMetadata metadata = 6;
    map<string,FilePaths> file_paths = 7;
}

message Collection {
  string id = 1;
  string name = 2;
  optional UpdateMetadata metadata = 4;
  optional int32 dimension = 5;
  string tenant = 6;
  string database = 7;
  int64 log_position = 8;
  int32 version = 9;
}

message Database {
    string id = 1;
    string name = 2;
    string tenant = 3;
}

message Tenant {
    string name = 1;
}

message UpdateMetadataValue {
    oneof value {
        string string_value = 1;
        int64 int_value = 2;
        double float_value = 3;
    }
}

message UpdateMetadata {
    map<string, UpdateMetadataValue> metadata = 1;
}

// Represents an operation the user submits
message OperationRecord {
    string id = 1;
    optional Vector vector = 2;
    optional UpdateMetadata metadata = 3;
    Operation operation = 4;
}

/* Metadata Reader Interface */

service MetadataReader {
    rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse) {}
}

message GetMetadataRequest {
    Where where = 1;
    WhereDocument where_document = 2;
    repeated string ids = 3;
    optional int32 limit = 4;
    optional int32 offset = 5;
}

message GetMetadataResponse {
    repeated MetadataEmbeddingRecord records = 1;
}

message MetadataEmbeddingRecord {
    string id = 1;
    UpdateMetadata metadata = 2;
}

// A `WhereDocument` clause for filtering embeddings based on their associated documents.
message WhereDocument {
    repeated string contains = 1;
    repeated string not_contains = 2;
}

// A `Where` clause for filtering metadata. A `Where` clause is a tree of
// `Where` clauses, where each node is exactly one of:
// - A leaf node representing a direct comparison between a metadata key and a
//   value or list of values.
// - An branch node with a list of children and a way to combine them (AND or OR).
message Where {
    oneof where {
        DirectComparison direct_comparison = 1;
        WhereChildren children = 2;
    }
}

message DirectComparison {
    oneof comparison {
        SingleStringComparison single_string_operand = 1;
        StringListComparison string_list_operand = 2;
        SingleIntComparison single_int_operand = 3;
        IntListComparison int_list_operand = 4;
        SingleFloatComparison single_float_operand = 5;
        FloatListComparison float_list_operand = 6;
    }
}

message WhereChildren {
    repeated Where children = 1;
    WhereChildrenType children_type = 2;
}

// A `Where` clause may have a list of children. This enum specifies how the
// children should be combined.
enum WhereChildrenType {
    AND = 0;
    OR = 1;
}

// A `Where` clause may have a list of allowed or disallowed values. This enum
// specifies which type of list it is.
enum WhereListType {
    IN = 0;
    NIN = 1;
}

// A leaf-node `Where` clause may compare a string, int, or float to a single
// value of the same type. These comparators apply to all three of those types.
enum GenericComparator {
    EQ = 0;
    NE = 1;
}

// Used when a leaf-node `Where` clause compares an int or float to a single
// value of the same type.
enum NumberComparator {
    GT = 0;
    GTE = 1;
    LT = 2;
    LTE = 3;
}

// Used when a leaf-node `Where` clause compares a string to a list of strings.
// `WhereListType` specifies whether values in the list are allowed or disallowed.
message StringListComparison {
    string key = 1;
    repeated string values = 2;
    WhereListType list_type = 3;
}

// Used when a leaf-node `Where` clause compares a string to a single string.
message SingleStringComparison {
    string key = 1;
    string value = 2;
    GenericComparator comparator = 3;
}

// Used when a leaf-node `Where` clause compares an int to a list of ints.
// `WhereListType` specifies whether values in the list are allowed or disallowed.
message IntListComparison {
    int64 key = 1;
    repeated int64 values = 2;
    WhereListType list_type = 3;
}

// Used when a leaf-node `Where` clause compares an int to a single int.
message SingleIntComparison {
    int64 key = 1;
    int64 value = 2;
    oneof comparator {
        GenericComparator generic_comparator = 3;
        NumberComparator number_comparator = 4;
    }
}

// Used when a leaf-node `Where` clause compares a float to a list of floats.
// `WhereListType` specifies whether values in the list are allowed or disallowed.
message FloatListComparison {
    double key = 1;
    repeated double values = 2;
    WhereListType list_type = 3;
}

message SingleFloatComparison {
    double key = 1;
    double value = 2;
    oneof comparator {
        GenericComparator generic_comparator = 3;
        NumberComparator number_comparator = 4;
    }
}

/* Vector Reader Interface */

service VectorReader {
    rpc GetVectors(GetVectorsRequest) returns (GetVectorsResponse) {}
    rpc QueryVectors(QueryVectorsRequest) returns (QueryVectorsResponse) {}
}

message GetVectorsRequest {
    repeated string ids = 1;
    string segment_id = 2;
}

message GetVectorsResponse {
    repeated VectorEmbeddingRecord records = 1;
}

message VectorEmbeddingRecord {
    string id = 1;
    Vector vector = 3; // TODO: we need to rethink source of truth for vector dimensionality and encoding
}

message QueryVectorsRequest {
    repeated Vector vectors = 1;
    int32 k = 2;
    repeated string allowed_ids = 3;
    bool include_embeddings = 4;
    string segment_id = 5;
    // TODO: options as in types.py, its currently unused so can add later
}

message QueryVectorsResponse {
    repeated VectorQueryResults results = 1;
}

message VectorQueryResults {
    repeated VectorQueryResult results = 1;
}

message VectorQueryResult {
    string id = 1;
    float distance = 3;
    optional Vector vector = 4;
}